#version 430
#define LIGHTS_MAX 64
#define PLANE_COUNT 6

layout(std430, binding = 0) writeonly buffer LightIndexBuffer {
    //Point light indexes
    int index[LIGHTS_MAX];
} lightIndexBuffer;

struct PointLight {
    vec3 position;
    float radius;
};

uniform PointLight lights[LIGHTS_MAX];

uniform sampler2D depthMap;
uniform mat4 viewMatrix;
uniform mat4 projMatrix;
uniform vec2 screenSize;
uniform int lightCount;

//Shared data between all of the threads
shared vec4 planes[PLANE_COUNT];
shared uvec2 minMaxDepth; //X = min, Y = max
shared uint visibleLightCount;
shared int visLightIndex[LIGHTS_MAX];



layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main() {
    //Working location
    ivec2 location = ivec2(gl_GlobalInvocationID.xy);
    //Workgroup tile
    ivec2 tileID = ivec2(gl_WorkGroupID.xy);
    //Total number of work groups
    ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);
    uint tileIndex = tileID.y * tileNumber.x + tileID.x;

    //Initialize the shared data
    if(gl_LocalInvocationIndex == 0) {
        minMaxDepth.x = 1;
        minMaxDepth.y = 0;
        visibleLightCount = 0;
    }

    //Initialization step is now complete
    barrier();
    //Get the min-/max- depth value for all threads
    float minDepth;
    float maxDepth;

    vec2 textVal = vec2(location) / screenSize;
    float depth = texture(depthMap, textVal).r;

    //Linearize the depth buffer value
    depth = (0.5 * projMatrix[3][2]) / (depth + 0.5 * projMatrix[2][2] - 0.5);

    uint atomicDepth = floatBitsToUint(depth);
    //Determine the min value
    atomicMin(minMaxDepth.x, atomicDepth);
    atomicMax(minMaxDepth.y, atomicDepth);

    barrier();

    //Setup the frustum
    if(gl_LocalInvocationIndex == 0) {
         minDepth = uintBitsToFloat(minMaxDepth.x);
         maxDepth = uintBitsToFloat(minMaxDepth.y);

         vec2 sides = (2.0 * vec2(tileID)) / vec2(tileNumber);

         //planes[0] = vec3(1.0 - sidex.x, 0, 0)
 		planes[1] = vec4(1.0, 0.0, 0.0, 1.0 + sides.x); // Left
 		planes[2] = vec4(0.0, 1.0, 0.0, 1.0 + sides.y); // Bottom

        sides = (2.0 * vec2(tileID + ivec2(1, 1))) / vec2(tileNumber);

        planes[3] = vec4(1.0, 0.0, 0.0, 1.0 - sides.x); // Right
 		planes[0] = vec4(0.0, 1.0, 0.0, 1.0 - sides.y); // Top

 		planes[4] = vec4(0.0, 0.0, 1.0, -minDepth); // Near
 		planes[5] = vec4(0.0, 0.0, 1.0, maxDepth); // Far

        for(uint i = 0; i < 4; i++) {
            planes[i] *=  projMatrix * viewMatrix;
            planes[i] /= length(planes[i].xyz);
        }

        planes[4] *= viewMatrix;
        planes[4] /= length(planes[4].xyz);
        planes[5] *= viewMatrix;
        planes[5] /= length(planes[5].xyz);
     }

    barrier();

    //Light Culling Stage
    float distance = 0.0;

    uint lightIndex = gl_LocalInvocationIndex;
    if (lightIndex < lightCount)
    {
        for(uint j = 0; j < PLANE_COUNT; j++)
        {
            distance = dot(vec4(lights[lightIndex].position, 1.0), planes[j]) + lights[lightIndex].radius;

            if(distance <= 0.0) {
                break;
            }
            else if(j == (PLANE_COUNT) - 1) {
                uint offset = atomicAdd(visibleLightCount, 1);
                visLightIndex[offset] = int(lightIndex);
            }
        }
    }

    barrier();

    if(gl_LocalInvocationIndex == 0) {
        uint offset = tileIndex * LIGHTS_MAX;
        for(uint i = 0; i < visibleLightCount; i++)
        {
            lightIndexBuffer.index[offset + i] = visLightIndex[i];
        }

        if(visibleLightCount != LIGHTS_MAX) {
            lightIndexBuffer.index[offset + visibleLightCount] = -1;
        }
    }
}
